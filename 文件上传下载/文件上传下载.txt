<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>文件上传</title>
</head>
<body>
	<form action="${pageContext.request.contextPath}/fileServlet" method="post" enctype="multipart/form-data">
	   姓名：<input type="text" name="name"/><br>
	   年龄: <input type="text" name="age"/><br>
	  照片： <input type="file" name="photo"/><br>
	  <input type="submit" value="提交">
	</form>
	
	<!-- 超链接文件下载,浏览器自动解析图片信息
	     缺点：下载内容的形式由浏览器决定，与服务器无关
	 -->
	<a href="${pageContext.request.contextPath}/resources/bizhi.png">bizhi.png下载</a><br>
	<a href="${pageContext.request.contextPath}/resources/image.jpg">image.jpg下载</a><br>
	<a href="${pageContext.request.contextPath}/resources/tree.png">tree.png下载</a><br>
	<a href="${pageContext.request.contextPath}/resources/EL表达式.ppt">EL表达式.ppt下载</a><br>
	<a href="${pageContext.request.contextPath}/resources/commons-fileupload-1.2.1.jar">commons-fileupload-1.2.1.jar下载</a>
	
	
	<br><br><br>
	<a href="${pageContext.request.contextPath}//DownloadServlet">文件下载</a>
	
</body>
</html>




文件上传下载

package Servlet;

@WebServlet("/fileServlet")
public class FileServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
    
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("utf-8");
		// 判断请求是否为multipart
		if (!ServletFileUpload.isMultipartContent(request)) {
			throw new RuntimeErrorException(null, "当前请求不支持文件上传");
		}
		// 创建一个FileItem工厂
		DiskFileItemFactory factory = new DiskFileItemFactory();

		// 设置使用临时文件的边界值，大于该值，上传文件先保存在临时文件中，否则上传文件直接写入内存
		// 单位：字节，边界值为1兆
		factory.setSizeThreshold(1024 * 1024 * 1);

		// 设置临时文件
		factory.setRepository(new File(this.getServletContext().getRealPath("/temp")));

		// 创建文件上传核心组件
		ServletFileUpload upload = new ServletFileUpload(factory);

		// 设置每一个item的头部编码，可以防止文件名的中文乱码
		upload.setHeaderEncoding("utf-8");

		// 设置单个上传文件的最大边界值 2M
		upload.setFileSizeMax(1024 * 1024 * 2);

		// 设置一次上传所有文件的总和最大值为5M
		upload.setSizeMax(1024 * 1024 * 5);

		// 解析请求
		try {
			// 获取到所有的item（每一个部分）
			List<FileItem> items = upload.parseRequest(request);
			// 遍历items集合
			for (FileItem it : items) {
				if (it.isFormField()) {
					// 判断表单提交的数据是否为普通的字段
					String fieldName = it.getFieldName();// 获取表单项名称
					// 使用指定的字符编码，接收数据
					String fieldValue = it.getString("utf-8");// 获取表单项值
					System.out.println(fieldName + "=" + fieldValue);
				} else {
					// 若it为文件表单项
					String fileName = it.getName();// 获取上传文件的原始文件名
					// 为防止上传同名的文件后，原来的文件被覆盖(文件名+当前上传的时间)
					fileName = System.currentTimeMillis() + fileName;
					// 获取输入流，其中有上传文件的内容
					InputStream is = it.getInputStream();
					// 获取文件保存在服务器的路径
					String path = this.getServletContext().getRealPath("/images");

					// 获取当前的系统时间
					Date date = new Date();
					// 格式化日期
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String str = sdf.format(date);

					// 以年、月、日创建目录
					// 获取当前系统时间
					Calendar instance = Calendar.getInstance();
					// 获取年、月、日
					int year = instance.get(Calendar.YEAR);
					// 日期中的月份从0开始计数
					int month = instance.get(Calendar.MONTH) + 1;
					// int day_of_month = instance.get(Calendar.DAY_OF_MONTH);
					int day = instance.get(Calendar.DATE);

					path = path + "/" + year + "/" + month + "/" + day;

					// 若该目录不存在，则创建目录
					File file = new File(path);
					if (!file.exists()) {
						// 创建单级目录
						// file.mkdir();
						// 创建多级目录
						file.mkdirs();
					}

					// 创建目标文件，将来用于保存上传的图片
					File descFile = new File(path, fileName);
					// 创建文件输出流，将输入流读取的数据写入到具体的文件中
					OutputStream os = new FileOutputStream(descFile);
					int len = -1;
					byte[] bytes = new byte[1024];
					while ((len = is.read(bytes)) != -1) {
						os.write(bytes, 0, len);
					}

					// 关闭连接
					os.close();
					is.close();

					// 删除临时文件
					it.delete();
				}
			}
		} catch (FileUploadException e) {
			e.printStackTrace();
		}
	}

}




文件下载:

package Servlet;

import java.io.IOException;
import java.io.InputStream;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/DownloadServlet")
public class DownloadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// 解决上传文件名的乱码
		String fileName = "超跑.jpg";

		// 打散: 按当前的字符编码进行打散
		byte[] by = fileName.getBytes("utf-8");

		// 组装 ：按目标字符编码进行组装
		fileName = new String(by, "ISO-8859-1");

		// 文件上传以附件形式上传，修好响应的头部属性content-disposition的值为attachment
		response.setHeader("content-disposition", "attachment;filename=" + fileName);

		// 获取连接服务端的资源文件的输入流
		InputStream is = this.getServletContext().getResourceAsStream("/resources/image.jpg");
		// 获取输出流
		ServletOutputStream out = response.getOutputStream();
		// 将输入流的数据写入到输出流中
		int len = -1;
		byte[] bytes = new byte[1024];
		while ((len = is.read(bytes)) != -1) {
			out.write(bytes, 0, len);
		}

		// 关闭流
		out.close();
		is.close();
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		doGet(request, response);
	}

}

