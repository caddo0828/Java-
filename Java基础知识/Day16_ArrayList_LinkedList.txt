一、Vector特有功能：
1、添加功能：
	public void addElement(Object obj); 将指定的组件添加到此向量的末尾，且向量的大小加 1。
2、获取功能：
	public Object elementAt(int index) ;返回指定索引处的组件
	public Enumeration elements( ) //返回向量组件的枚举
                  // Enumeration  是一个接口，因此与迭代器差不多，其实就是一个子类实现类对象
	  boolean   hasMoreElements( ) //判断是否还有枚举元素
	  Object nextElements( )  //获取枚举元素


二、LinkedList特有的功能：
1、添加功能：
	public Object addFirst( Object obj) //在集合第一个位置进行添加
	public Object addLast(Object obj) //在集合最后一个位置进行添加  （其实与单独的add方法无区别，因此没啥意义）
2、获取功能：(对最终的集合元素无影响)
	public Object getFirst( ) //获取集合中第一个元素
	public Object getLast( ) //获取集合中的最后一个元素
3、移除功能：（对最终集合元素有影响）
	public Object removeFirst( )  //移除集合中第一个元素
	public Object removeLast( )  //移除集合中的最后一个元素

三、删除ArrayList中重复的元素
需求：删除集合中自定义对象的重复值（对象的成员变量值都相同）   
为什么自定义对象删除时进行equals判断时容易出错
为什么呢？
	判断功能contains( )是集合自动生成的，因此查看源码得知
	contains ( )方法其实本质上比较的是equals方法
	而学生类中没有equals（）方法，因此默认使用父类Object类的equals（）方法最终比较的地址值
	因为每一个对象的地址值均不同，所以未被删除掉
	所有按照自我的需求，比较成员变量的值，需要在自定义类中重写equals（）方法

四、用LinkedList实现默认自定义栈集合
	
	
五、泛型：是一种特殊的类型，把明确的工作推迟到创建对象或者调用方法的时候才明确的特殊的类型
格式：<数据类型> //这里的数据类型只能是引用类型
好处：
	A: 将运行时会出现的问题提前到编译期间
	B; 避免了强制转换
	C: 优化了程序设计，解决黄色警告线
集合也会模仿数组的数据类型明确，因此这种技术也被叫做是泛型
出现原因：早期的Object可以存储任意类型，进行向上转型时不会出现错误，但是向下转型时容易抛安全问题

六、泛型类
《一》格式：类名<T> //T表明之后要用什么类，就定义成什么 
注意：定义的泛型类必须是包装类
1、具体定义的类型（对类进行操作）具体进行初始化new对象   //泛型类
2、对方法进行操作（对方法进行定义），相应的对象不需要进行泛型定义     //泛型方法
3、接口定义成泛型类       //泛型接口     
注意：接口定义为泛型类时实现类不需要定义，，当接口不明确类型时，实现类也需要定义为未知类型<T>

《二》泛型的高级通配符
1、泛型如果明确了类型时，前后应该一致
     例：Collection<Object> c = new ArrayList<Object>(  ) ;
2、泛型如果是用   ？ 表示任意的类型都可以    
     例：Collection<?> c = new ArrayList<任意类型皆可>(  ) ;
3、泛型用   ？ extends   E    表示类型只能是  E类或者其子类    向下转型皆可
     例：Collection<?  extends   E> c = new ArrayList<E或者子类>(  ) ;
4、泛型如果用   ?  super  E    表示类型只能是    E或者父类    向上转型
     例：Collection<?  super   E> c = new ArrayList<E或者E的父类>(  ) ;

七、JDK新特性
1、自动装箱，自动拆箱  
2、增强for : 是for循环的一种   
     格式： 
	for(元素数据类型   变量   ： 数组或者Collection集合 ) {   
		使用变量即可，该变量就是元素
	 }
       优缺点： 好处：优化了数组以及集合的遍历
                    缺点：容易出现当对象为空时，抛异常
	    解决方案 ： 使用前先对对象是否为空进行判断

八、静态导入
格式：import  包名.类名.方法名
(一般不使用)
注意：
	1、导入的方法必须是静态方法
	2、当出现多个同名的方法时候，必须在使用导入方法前加上前缀（java.lang.math.ads(-10)） 

九、可变参数
---在定义方法的时候不知道参数有多少个
格式
	修饰符 返回值类型   方法名 （数据类型...  变量名）{   }
注意：
	1、此处的变量名其实是一个数组
	2、如果这个方法有多个参数，并且有可变参数，那么这个可变参数应该定义在最后
	3、因为从本质上此处的可变参数是一个数组，数组的长度是固定的，因此当可变参数位于前面的时候表明
	     数组已经是固定的且不可改变的

十、Arrays工具类中的一个方法 ：将数组转换成集合
public static <T> List<T> asList(T... a）
//经过这个方法将数组转换为集合时，本质上是一个数组，长度是固定的，因此对集合不能进行长度修改有关的操作
//如add、remove

