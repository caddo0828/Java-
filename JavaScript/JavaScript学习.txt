一、JavaScript学习
1、定义方式：
	● <script>可以定义在html页面的任何地方，但是定义的位置会影响执行的速度
	● <script>可以定义多个

2、注释
	● 单行注释：// 注释内容
	● 多行注释: /* 注释内容 */

3、数据类型
	●原始数据类型（基本数据类型）
	 number： 数字 ，整数/小数/NaN（一个不是数字的数字类型）
	 String   字符串   'a'也是字符串
	 boolean  true 或者 false
	 null     一个对象为空的占位符
	 undefined  未定义，如果一个变量没有给定初始值，则默认为undefined
	 
	 ● 引用数据类型： 对象
	
4、变量
	 ● 一小块存储数据的内存空间
	 ● java语言是强类型语言，而JavaScript是弱类型语言
		●强类型，在开辟变量存储空间时，定义了空间将来存储的数据类型，是固定的
		●弱类型：在开辟变量存储空间时，不定义空间将来存储的空间类型
	 ● 语法：
		var 变量名 = 初始值;
		
		
5、运算符 
typeof（）
	● 用于判断变量的类型
		使用：
			 typeof(变量)
		
		注意事项：
				当定义变量为null 时，用typeof判断出来的类型是Object
			

一元运算符：
	● 只有一个运算数的运算符 ：（自增和自减）++ 、 -- 、 +
算术运算符
复制运算符
比较运算符 ： ===（全等于）特别(判断对象是不是同一个)
逻辑运算符   && ， ||    返回 0 与 1     true 为1   ， false 为 0 
三元运算符

6、特殊语法
	● 语句以：结尾，如果一行只有一条语句，则可以省略：号			
	● 定义变量时使用var关键字，也可以不使用
			● 用，定义的是局部变量
			● 不用，定义的是全局变量 (不建议使用)
	


7、流程控制语句
	●  if...else
	●  switch
		* 在Java语句中，switch语句可以接收的数类型为byte ,int ,short, char类型, 枚举(1.5),String(1.7)
		* switch(变量) {
			case 值：
				表达式；
				break;   (如果没有break，一直走下去)
			default:
				表达式；
				break；
		}
		
		*	javaScript中可以接收所有类型的数据
	
8、异常捕获
try ....catch()	
	
	

二、对象
1、Function对象：描述一个方法或者函数
●Function: 函数（方法）对象
	● 1、创建
		* var fun = new Function(形式参数列表 , 方法体);
			使用：	
				var fun = new Function("a","b","alert(a)");
				fun(3,4);    
			
		* function  方法名称（参数列表）{
			方法体；
		}
		
		* var 变量名 = function() {
			方法体；
		}
		
	● 属性：
		length: 代表形参的个数
    ● 特点：
		* 方法定义是形参类型不用写
		* 方法是一个对象，如果定义名称相同的方法，会覆盖
		* 在JS中方法的调用只有方法的名称有关，和参数列表无关
		* 在方法声明中有一个隐藏的内置对象（数组），arguments , 封装所有的实际参数

	● 调用：
		* 方法名称（实际参数列表）；
		
		
		
2、Array数组对象
	● 创建：
		var arr = new Array(元素列表);
		var arr = new Array(默认长度);
		var arr = [元素列表];
	● 方法
		* join(参数)；将数组中的元素按照指定的分割符拼接为字符串
				arr.join("==")
		
		* push(参数);
				在数组末尾添加指定的元素
			
		* concat() ;
				连接两个或更多的数组
	
	● 属性
		length: 数组长度
	● 特点
		JS中，数组元素的类型是可变的

		
3、Date对象	
	● 创建
		var date = new Date();
		
	● 方法
		* toLocaleString();
			根据本地时间格式，把 Date 对象转换为字符串。
		
		*  getTime(); 
			获取毫秒值，返回当前日期对象描述的时间到1970年0点的毫秒差
			
			
4、RegExp正则表达式对象
	● 创建：
		var reg_e = new RegExp("^\d{2,6}\w{3,5}&");
		var reg = /正则表达式/;
		
	● 方法：
		*  test(变量)
		   用于检测变量是否符合对应的正则表达式
		   
		   
5、Global
	● 特点：全局对象，Global中封装的方法不需要对象就可以直接调用  
			方法名（）；

	● 方法：
		* encodeURI(); url编码
		  decodeURI(); url解码
		
		* encodeURIComponent(); url编码，编码的字符更多
		  decodeURIComponent(); url解码
		
		*  parseInt(参数);
			 将字符串转换为数字,逐一判断每一个字符是否是数字，直到不是数字为止
			 将前边的数字部分转成number
			 
		*  isNaN() 判断一个值是否是NaN
		
		* eval(参数)
			解析javaScript代码
			
		     