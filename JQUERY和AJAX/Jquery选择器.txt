JQUERY学习：
一、定义
是一个js的框架，也可以认为是一个js库，封装了JS方法

● 注意事项：
	DOM对象（文档对象模型）：指的是HTML页面的元素（标签），通过DOM对象可以使用JavaScript的一些属性和方法
	jQuery对象： 指的是通过jQuery创建出来的，一些对象，通过jQuery可以使用Jquery api 中的一些方法

DOM对象和Jquery对象，是不能互相调用的，例如DOM对象不能使用jquery的方法，Jquery对象也不能使用javascript中的属性和方法



二、加载启动jquery
1、将jquery库放在webcontent目录下
2、页面中引入 <script type="text/javascript" src="static/js/jquery-2.1.0.min.js"></script>
3、使用
●  页面中使用jquery
   当页面中所有的元素都加载完成后，才会执行启动jquery的代码，也就是说在$(function() {} )里写的代码时
   页面中的所有元素已经出现了
  
 
●  加载启动jquery的定义:
	*	$(function() {} );
	*   jQuery(function() {} );
	*   window.jQuery(function() {} );
	
注意事项:
		jQuery的定义：
	  	$  等价于jQuery
	  	$  是jQuery中定义的一个全局变量，用于表示jQuery这个对象
		
		
		
三、jQuery对象和DOM对象之间的转换
1、 DOM对象转换成jQuery对象
● 	格式：
		var jq = $(DOM对象) ;
		
		
2、 Jquery对象转换成DOM对象    
●   格式：
		/*根据id获取jQuery对象  
		jQuery对象其实是一个数组，数组的长度取决于jQuery获取页面元素的个数，根据id只能获取到一个，数组中存放的元素都是DOM对象
		*/
		var dom = $("#id号") ； id选择器获取的方法
		
		
		//将jQuery对象转换成DOM对象
		var input = vjqu[0];
		
		
		
四、jQuery操作选择器
● 1、id选择器:
	* 格式：
		$("# lastname ")；    id="lastname"的元素
  

注意事项：
		id是不能重复的，因此如果页面中有多个元素id相同，那么jQuery只会获取第一次出现的这个id作为jQuery对象
		

● 2、class选择器
	* 格式：
		$(".log");           所有class="log"的元素  
		
		
注意事项：
		alert("class类选择器"+$(".name").length);
		//获取出来的jQuery是一个数组，如果直接使用jQuery获取属性，那么jQuery会把数组中的第一个元素当成jQuery对象使用
		alert($(".name").val());
		//如果想获取非第一个元素的对象，需要根据索引获取到指定元素位置的DOM对象，再转成Jquery对象使用
		alert($(".name")[1].value);
		alert($($(".name")[1]).val());
		
		
● 3、element选择器
	* 格式：
		$("p");				所有的p元素
     
	 
	$("input")[0].value；
	

● 4、层次选择器
   （1） parent > child选择器
		   * 格式:
				$("div > .username");        获取所有div标签下的class="username"的元素;
				
			*   $("div#div1 .username")      获取id="div1" 的div标签下class="username"的元素
			
			
   （2）prev + next选择器
			* 匹配所有紧接在pre元素后的next元素
			 
			* 格式：
				$("pre + next")；
				
				$("div + .username");         获取紧临在div标签后的class="username"的元素
				
			
   （3）prev ~ siblings
			* 匹配所有pre元素之后的 siblings元素
			
			* 格式：
				$("pre ~ next");
				
				$("div ~ .username");          获取紧接在div后的所有class="username"的元素
			

● 5、所有元素 *
	* 格式：
		$("*");             获取所有的元素
		

● 6、简单过滤选择器
	* :first                   
		$("p:first")；     获取第一个p元素
		
	* :last 
		$("p:last");       获取最后一个p元素
		
	* :even
		$("tr:even");       tr中的所有偶数元素（下标从0开始）
		
	* :odd
		$("tr:odd")；		tr中所有的奇数元素
		
	* :eq(index)
		$("ul li:eq(3));	列表中下标为3的li元素
		
    * :gt(index);
		$("ul li:gt(3)");	列表中下标大于3的li元素
		
	* :lt(index);
		$("ul li:lt(3)");	列表中下标小于3的li元素
		
	* :not(selector)；
		$("input:not(:empty)");  所有不为空的inout元素
		
	* :header
		$(":header") 		   所有标题元素 <h1> - <h6>
		
	* :empty
		$(":empty")            无子（元素）节点的所有元素			
		
	* :hidden
		$("p:hidden")          所有隐藏的 <p> 元素
	
	* :visible
		$("table:visible")     所有可见的表格
	
	* :s1,s2,s3
		$("th,td,.intro")       所有带有匹配选择的元素
		
		
	
● 7、属性选择器
	* [attribute]
		$("[href]")               所有带有 href 属性的元素
	
	* $(".name[value]");          所有class="name“ 并且拥有value属性的元素
	
	*[attribute=value]
		$("[href='#']")           所有 href 属性的值等于 "#" 的元素
		
	* [attribute!=value]
		$("[href!='#']")          所有 href 属性的值不等于 "#" 的元素
		
	* [attribute$=value]
		$("[href$='.jpg']")      所有 href 属性的值包含以 ".jpg" 结尾的元素
			
	* [attribute^=value]
		$("[href^='a']")      所有 href 属性的值包含以 "a" 开始的元素
		
		
●  其他选择器
	* :input
		$(":input")     	所有 <input> 元素
	
	* :text
		$(":text")			所有 type="text" 的 <input> 元素

	* :password
		$(":password")      所有 type="password" 的 <input> 元素

	* :radio
		$(":radio")			所有 type="radio" 的 <input> 元素

	* :checkbox
		$(":checkbox")		所有 type="checkbox" 的 <input> 元素

	* :submit
		$(":submit")		所有 type="submit" 的 <input> 元素

	* :reset
		$(":reset")			所有 type="reset" 的 <input> 元素

	* :button
		$(":button")		所有 type="button" 的 <input> 元素

	* :image
		$(":image")			所有 type="image" 的 <input> 元素

	* :file
		$(":file")			所有 type="file" 的 <input> 元素
