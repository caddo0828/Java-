package plain;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Folder;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Store;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

/**发送简单的纯文本文件
 * @author 老腰
 */
public class SendPlainEmail {
	//创建设置邮件Message方法,通过构造方法中根据指定的session对象获取Message对象
		private static Message createMessage(Session session) throws MessagingException {
			//6、获取MIME类型的邮件对象，采用MimeMessage子集
			Message message = new MimeMessage(session);

			//7、设置邮件地址Address抽象类，通过InternetAddress类获取
			InternetAddress address = new InternetAddress(" 发件人地址 ");

			//设置邮件的发件人地址
			message.setFrom(address);

			//设置邮件收件人地址,以及接收的文件类型(设置多个邮件接收人地址)
			message.setRecipient(Message.RecipientType.TO, new InternetAddress(" 收件人地址 "));
			
			//设置邮件的标题
			message.setSubject("纯文本文件");

			//设置正文对象
			BodyPart bodyPart = new MimeBodyPart();
			bodyPart.setContent("SendPlainEmail", "text/plain;charset=utf-8");

			//创建多媒体对象
			Multipart multipart = new MimeMultipart();
			multipart.addBodyPart(bodyPart);
			
			//设置邮件的格式，以及内容
			message.setContent(multipart);
			return message;
		}
		
		public static void main(String[] args) throws MessagingException, IOException {
			//1、获取配置对象
			Properties prop = new Properties();
			
			//设置属性，主机地址，传输的服务器协议，是否进行用户授权
			prop.setProperty("mail.host", "localhost");
			prop.setProperty("mail.transport.protocol", "smtp");
			prop.setProperty("mail.smtp.auth", "true");
			
			//2、获取对应的授权对象
			Authenticator auth = new Authenticator() {
				@Override
				protected PasswordAuthentication getPasswordAuthentication() {
					return  new PasswordAuthentication("邮箱账号","密码");
				}
			};
			
			//3、通过配置对象以及授权对象获取Session对象
			Session session = Session.getDefaultInstance(prop, auth);

			//4、打开对应的session的Debug模式查看发送状态
			session.setDebug(true);

			//5、根据Session对象创建对应的Message对象
			Message message = createMessage(session);

			//6、创建Transport抽象类对象（通过对应的session对象获取）
			Transport transport = session.getTransport();

			//7、连接服务器
			transport.connect("smtp.sohu.com", "邮箱账号", "邮箱密码");

			//发送邮件(参数为： 邮件对象、 邮件所对应的所有收件地址)
			transport.sendMessage(message, message.getAllRecipients());

			//关闭连接
			transport.close();
		
			sendEmail();
			
		}

}
